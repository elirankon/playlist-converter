const sinon = require('sinon');
const { expect } = require('chai');
const googleapis = require('googleapis');
const chance = require('chance').Chance();

const youtubeHelper = require('../../youtube/youtubeHelper');

describe('youtubeHelper', () => {
    describe('#getItemsFromPlaylist', () => {
        it('gets the playlist items', async () => {
            const playlistStub = sinon
                .stub(googleapis.youtube_v3.Resource$Playlistitems.prototype, 'list')
                .yields(undefined, {
                    data: {
                        items: [
                            {
                                snippet: {
                                    description: chance.string({ length: 8 }),
                                    title: chance.string({ length: 8 }),
                                },
                            },
                        ],
                    },
                });
            const playlistLength = await youtubeHelper.getItemsFromPlaylist({ id: 'sdfsdf' });
            expect(playlistLength).to.equal(1);
            playlistStub.restore();
        });

        it('gets the playlist items and paginates', async () => {
            const playlistStub = sinon
                .stub(googleapis.youtube_v3.Resource$Playlistitems.prototype, 'list')
                .onFirstCall()
                .yields(undefined, {
                    data: {
                        items: [
                            {
                                snippet: {
                                    description: chance.string({ length: 8 }),
                                    title: chance.string({ length: 8 }),
                                },
                            },
                        ],
                        nextPageToken: chance.string(),
                    },
                })
                .onSecondCall()
                .yields(undefined, {
                    data: {
                        items: [
                            {
                                snippet: {
                                    description: chance.string({ length: 8 }),
                                    title: chance.string({ length: 8 }),
                                },
                            },
                        ],
                    },
                });
            const playlistLength = await youtubeHelper.getItemsFromPlaylist({ id: 'sdfsdf' });
            expect(playlistLength).to.equal(2);
            playlistStub.restore();
        });

        it('generates in-memory list of queries from title and/or description', async () => {
            const v1Title = chance.string({ pool: 'abcdefghijklmnopqrstuvwxyz' });
            const v2Title = chance.string({ pool: 'abcdefghijklmnopqrstuvwxyz' });
            const playlistStub = sinon
                .stub(googleapis.youtube_v3.Resource$Playlistitems.prototype, 'list')
                .onFirstCall()
                .yields(undefined, {
                    data: {
                        items: [
                            {
                                snippet: {
                                    description: chance.string({ length: 8 }),
                                    title: v1Title,
                                },
                            },
                        ],
                        nextPageToken: chance.string(),
                    },
                })
                .onSecondCall()
                .yields(undefined, {
                    data: {
                        items: [
                            {
                                snippet: {
                                    description: chance.string({ length: 8 }),
                                    title: v2Title,
                                },
                            },
                        ],
                    },
                });
            const playlistLength = await youtubeHelper.getItemsFromPlaylist({ id: 'sdfsdf' });
            expect(playlistLength).to.equal(2);
            expect(youtubeHelper.listLoaded()).to.eql([v1Title, v2Title]);
            playlistStub.restore();
        });

        it('gets the query from the description for auto generated by youtube videos', async () => {
            const v1Title = chance.string({ pool: 'abcdefghijklmnopqrstuvwxyz' });
            const v2Title = chance.string({ pool: 'abcdefghijklmnopqrstuvwxyz' });
            const v1Description = 'This line is ignored\n\nThis line is saved to memory\n\nBlah Blah Auto-generated by YouTube.';
            const playlistStub = sinon
                .stub(googleapis.youtube_v3.Resource$Playlistitems.prototype, 'list')
                .onFirstCall()
                .yields(undefined, {
                    data: {
                        items: [
                            {
                                snippet: {
                                    description: v1Description,
                                    title: v1Title,
                                },
                            },
                        ],
                        nextPageToken: chance.string(),
                    },
                })
                .onSecondCall()
                .yields(undefined, {
                    data: {
                        items: [
                            {
                                snippet: {
                                    description: chance.string({ length: 8 }),
                                    title: v2Title,
                                },
                            },
                        ],
                    },
                });
            const playlistLength = await youtubeHelper.getItemsFromPlaylist({ id: 'sdfsdf' });
            expect(playlistLength).to.equal(2);
            expect(youtubeHelper.listLoaded()).to.eql(['This line is saved to memory', v2Title]);
            playlistStub.restore();
        });

        it('rejects if youtube api returns an error', async () => {
            const playlistStub = sinon
                .stub(googleapis.youtube_v3.Resource$Playlistitems.prototype, 'list')
                .onFirstCall()
                .yields({ message: 'BLAAAH YOU DEAD' }, undefined);
            youtubeHelper.getItemsFromPlaylist({ id: 'sdfsdf' }).catch((err) => {
                expect(err.message).to.equal('The API returned an error: BLAAAH YOU DEAD');
                playlistStub.restore();
            });
        });

        it('rejects if youtube api returns an invalid response', async () => {
            const playlistStub = sinon
                .stub(googleapis.youtube_v3.Resource$Playlistitems.prototype, 'list')
                .onFirstCall()
                .yields(undefined, { response: {} });
            youtubeHelper.getItemsFromPlaylist({ id: 'sdfsdf' }).catch((err) => {
                expect(err.message).to.equal('The API returned an error: invalid response');
                playlistStub.restore();
            });
        });
    });

    describe('#searchAndGeneratePlaylist', () => {});

    describe('#createPlaylist', () => {});
});
