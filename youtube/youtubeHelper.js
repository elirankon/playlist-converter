const { google } = require('googleapis');
const { fetchAndIterate } = require('./utils');

function processAutoGenerateYTMusicVideo(video) {
  const { title } = video.snippet;
  if (video.snippet.description.endsWith('Auto-generated by YouTube.')) {
    const videoDescriptionParts = video.snippet.description.split('\n\n');
    return videoDescriptionParts[1];
  }

  return title
    .toLowerCase()
    .replace(/(official video|official audio|music video)/g, '')
    .replace(/\W/g, ' ');
}

function fetchItemsFromApi({
  auth, id, limit = 50, next,
} = {}) {
  return new Promise((resolve, reject) => {
    const service = google.youtube('v3');
    const params = {
      auth,
      part: 'snippet',
      type: 'playlist',
      playlistId: id,
      pageToken: next || null,
      maxResults: limit,
    };

    service.playlistItems.list(params, (err, response) => {
      if (err || !response.data) {
        reject(new Error(`The API returned an error: ${err}`));
      }

      const items = response.data.items.map(processAutoGenerateYTMusicVideo);
      resolve({ items, nextPage: response.data.nextPageToken });
    });
  });
}


async function getItemsFromPlaylist(params) {
  let plItems = [];
  await fetchAndIterate(fetchItemsFromApi, params, async (results) => {
    plItems = plItems.concat(results.items);
    return results.nextPage;
  });

  return plItems;
}
module.exports = {
  getItemsFromPlaylist,
};
